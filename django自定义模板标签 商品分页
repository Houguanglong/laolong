from django import template
from django.shortcuts import reverse
from django.utils.safestring import mark_safe
from ..models import GoodsInfo
from django.conf import settings
import urlparse
import urllib

register = template.Library()

@register.simple_tag #使用装饰器注册模板标签
def divide_page(curr_page,page_obj,url_name,request_url,args=(),kwargs={}):
    """
    html文件使用形式：
    {% divide_page curr_page    p   'shop:categorys' request.get_full_path kwargs=params %}
        方法名    当前页码  Paginator分页对象  路由     当前路径             获取参数
            算法
                1、先获取所有页码列表
                range_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

                2、 然后定义需要展示的数目，这里定义为一个5
                max_page_count = 5

                3、获取中间位置前后需要加减索引
                center_index = max_page_count / 2

                4、获取当前页面索引，这里定义为当前页面为5
                curr_index = range_list.index(5)
                range_list[curr_index-center_index:]
                [3, 4, 5, 6, 7, 8, 9]

                5、循环处理右边
                获取一个计数器
                当计数器的索引大于总数目时退出
                [3, 4, 5, 6, 7, 8, 9] 迭代这个时
                当迭代到7的位置，计数器的值就为6，退出循环，就获取到以下列表
                [3, 4, 5, 6, 7]

        """
    url = reverse(url_name,args=args,kwargs=kwargs)                 #点击页码需要跳转的前缀
    url = url.encode('utf8')                                        #默认为unicode,这里修改成utf-8
    page_str = '<div class="pagenation">'                           #分页html代码
    max_page_count = 5                                              #最大显示页数
    page = page_obj.page(curr_page)                                 #获取当前页

    #获取当前get参数 使用for循环取出参数 {'curr_page':['1']}
    params = {k: v[0] for k, v in urlparse.parse_qs(
        urlparse.urlparse(request_url).query).items()}


    # 生成上一页html 使用has_previous()方法判断是否有上一页
    if page.has_previous():
        #页码减一
        params["curr_page"] = curr_page - 1

        #urllib.urlencode方法将路径转成curr_page=1&curr_order=1格式
        curr_url = '%s?%s'%(url,urllib.urlencode(params))
        #添加上一页html标签 设置url
        page_str += '<a href="%s" style="background-color: #5bc0de"> 上一页 </a>' % curr_url

    # 获取中间位置前后需要加减索引
    center_index = max_page_count / 2
    #首先得到全部的页码[1,2,3,4,5,6,7,8,9]
    page_range = [c for c in page_obj.page_range]
    #获取当前页的索引 这里定义当前页面为5
    page_index = page_range.index(curr_page)

    #如果当前位置小于2
    if page_index >= center_index:
        #页码列表[3,4,5,6,7]
        page_range = page_range[page_index-center_index:]

    i = 1

    # 生成中间页码html
    for cp in page_range:
        params["curr_page"] = cp
        curr_url = "%s?%s" % (url, urllib.urlencode(params))
        if cp == curr_page:
            page_str += '<a href="%s" class="active" style="background-color: #1b6d85">%s</a>' % (
                curr_url, cp)
        else:
            page_str += '<a href="%s" >%s</a>' % (
                curr_url, cp)

        #如果i大于显示页数5则退出
        i += 1
        if i > max_page_count:
            break


    # 生成下一页html
    if page.has_next():
        params["curr_page"] = curr_page + 1
        curr_url = '%s?%s'%(url,urllib.urlencode(params))
        page_str += '<a href="%s" style="background-color: #5bc0de"> 下一页 </a>' % curr_url

    page_str += "</div>"
    #使用mark_safe方法将路由路径字符串渲染html格式
    return mark_safe(page_str)
    
---------------------------------------------------------------------------
https://docs.djangoproject.com/en/1.11/howto/custom-template-tags/ 参考文档
